package mercury;
import java_cup.runtime.*;
import mercury.arm.instruction.LabelStatement;
import java.util.ArrayList;
import java.util.List;
import mercury.arm.Constants;


    action code{:

    protected ProgramStatement statement = new ProgramStatement();

    private void newStatement(){
        statement= new ProgramStatement();
    }

    :}
    /* Codigo del parser, se copia integramente a la clase final.
        Se agrega el manejo de errores. */
    parser code {:

     //Miembro de la clase que contiene los errores del programa
     private ErrorList mErrorList=new ErrorList();

     public ErrorList getErrorList(){
        return mErrorList; }

     //Miembro de clase que contiene la lista de statements
     protected List<ProgramStatement> mProgramStatementList= new ArrayList<ProgramStatement>();

     protected List<LabelStatement> mLabelList=new ArrayList<LabelStatement>();

     public List<ProgramStatement> getStatementList(){ return mProgramStatementList;}

     public List<LabelStatement> getLabelStatementList(){return mLabelList;}


@Override
     public void syntax_error(Symbol sy){
                report_error("Error de sintaxis. Linea: " + (sy.left + 1) +
                " Columna: " + sy.right + ". Texto: " + sy.value + " ", null);
                addError("", ErrorType.SYNTACTIC_ERROR,sy.left + 1,sy.right + 1);
      }

      //Metodo que ingresa los errores a la lista de errores del programa
      public void addError(String message, String type,int line, int column){
        mErrorList.add(new ErrorMessage(line, column, message, type));
      }

        /* Reporte de error encontrado. */
    public void report_error(String message, Object info) {
            StringBuilder m = new StringBuilder("Error");
            if (info instanceof java_cup.runtime.Symbol) {
                java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
                if (s.left >= 0) {
                    m.append(" in line "+(s.left+1));
                    if (s.right >= 0)
                        m.append(", column "+(s.right+1));
                }
            }
            m.append(" : "+message);
            System.err.println(m);
        }
        public void unrecovered_syntax_error(Symbol cur_token){
          System.out.println("Error, no se puede continuar con la ejecucion.");
        }

          public void report_fatal_error(String message, Object info) {
            report_error(message, info);
            System.exit(1);
        }

:}
     /* ------------Declaracion de simbolos terminales y no terminales---------- */

     /* Terminales (tokens obtenidos por el analizador lexico).

        Terminales que no tienen un valor son listados primero, los terminales que
        tienen un valor como los enteros son listados en la segunda o demas lineas. */
     terminal        newline, comma, leftpar, rightpar, sharp;
     terminal String setlabel, comment, register, branch, calllabel, mnemonic, conditionalmnemonic, mnemonicset, mnemonicsetconditional, compare, compareconditional, move, conditionalmove, moveset, movesetconditional,rrx, conditionalrrx, rrxset, rrxsetconditional,shift, conditionalshift, shiftset, shiftsetconditional, mla, mlaconditional, mlaset, mlasetconditional,mul, mulconditional, mulset, mulsetconditional, memorymnemonic, memorymnemonicconditional, hex, num;

     /* No terminales usados en la seccion gramatical

        Primero se lista los no terminales que tienen un valor Object y despues
        se lista los no terminales que tienen un entero. Un Object se refiere a que
        no tienen tipo, pudiendo ser entero o String. */

     non terminal Object     PROGRAM, STATEMENT, INSTRUCTION, DATAPROCESSING, MEMORY, DPADDR, RELATIVEADDR, CMVADDR, MLAADDR,MOVADDR, MULADDR, RRXADDR,SHIFTADDR, SHAMT5;
     non terminal String     NORMALADDR, DPMNEMONIC, CMPMNEMONIC, MVMNEMONIC, MLAMNEMONIC, MEMMNEMONIC, IMMEDIATE,MULMNEMONIC,RRXMNEMONIC,SHIFTMNEMONIC;

     /* ------------------- Seccion de la gramatica ------------------------ */
/**
     /* La gramatica de nuestro analizador.

     PROGRAM -> setlabel comment | comment | INSTRUCTION comment | INSTRUCTION newline
     INSTRUCTION -> DATAPROCESSING | MEMORY | BRANCH
     DATAPROCESSING -> DPMNEMONIC DPADDR | CMPMNEMONIC CMVADDR | MVMNEMONIC CMVADDR |
                       MLAMNEMONIC MLAADDR
     MEMORY -> MEMMNEMONIC register comma RELATIVEADDR
     BRANCH -> branch calllabel
     DPADDR-> NORMALADDR comma register | NORMALADDR comma IMMEDIATE |
                    NORMALADDR comma RELATIVEADDR
     NORMALADDR -> register comma register
     RELATIVEADDR-> leftpar register comma IMMEDIATE rightpar | leftpar register rightpar |
                    leftpar NORMALADDR rightpar
     CMVADDR -> NORMALADDR | register comma IMMEDIATE
     MLAADDR -> NORMALADDR comma NORMALADDR | NORMALADDR comma register comma IMMEDIATE
     DPMNEMONIC -> mnemonic | conditionalmnemonic | mnemonicset | mnemonicsetconditional
     CMPMNEMONIC -> compare | compareconditional
     MVMNEMONIC -> move | condidionalmove | moveset | movesetconditional
     MLAMNEMONIC -> mla | mlaconditional | mlaset | mlasetconditional
     MEMMNEMONIC -> memorymnemonic | memorymnemonicconditional
     IMMEDIATE -> sharp hex | sharp num
  */

         /*
           PROGRAM ::=  PROGRAM setlabel INSTRUCTION comment INSTRUCTION | setlabel INSTRUCTION comment INSTRUCTION|
           INSTRUCTION comment INSTRUCTION| INSTRUCTION newline | INSTRUCTION comment | error newline INSTRUCTION;
           INSTRUCTION ::=  DATAPROCESSING | MEMORY | BRANCH;
           DATAPROCESSING ::= DPMNEMONIC DPADDR | CMPMNEMONIC CMVADDR | MVMNEMONIC CMVADDR |
                                  MLAMNEMONIC MLAADDR;
           MEMORY ::= MEMMNEMONIC register comma RELATIVEADDR;
                BRANCH ::= branch calllabel | branch branchmnemonic;
                DPADDR ::= NORMALADDR comma register | NORMALADDR comma IMMEDIATE |
                               NORMALADDR comma RELATIVEADDR;
                NORMALADDR ::= register comma register;
                RELATIVEADDR ::= leftpar register comma IMMEDIATE rightpar | leftpar register rightpar |
                               leftpar NORMALADDR rightpar;
                CMVADDR ::= NORMALADDR | register comma IMMEDIATE;
                MLAADDR ::= NORMALADDR comma NORMALADDR | NORMALADDR comma register comma IMMEDIATE;
                DPMNEMONIC ::= mnemonic | conditionalmnemonic | mnemonicset | mnemonicsetconditional;
                CMPMNEMONIC ::= compare | compareconditional;
                MVMNEMONIC ::= move | conditionalmove | moveset | movesetconditional;
                MLAMNEMONIC ::= mla | mlaconditional | mlaset | mlasetconditional;
                MEMMNEMONIC ::= memorymnemonic | memorymnemonicconditional;
                IMMEDIATE ::= sharp hex | sharp num;
         */

  start with PROGRAM;

PROGRAM ::= PROGRAM STATEMENT| STATEMENT;
  STATEMENT::=   setlabel:setlabel comment{:parser.mLabelList.add(new LabelStatement(setlabel,setlabelleft + 1));:} |
                 setlabel:setlabel2 newline{:parser.mLabelList.add(new LabelStatement(setlabel2,setlabel2left + 1));:} |
                 INSTRUCTION newline{:parser.mProgramStatementList.add(statement);
                                      newStatement();
                                     :} |
                 INSTRUCTION comment{:parser.mProgramStatementList.add(statement);
                                      newStatement();
                                     :} |
                 newline |
                 comment |
                 error newline STATEMENT;
  INSTRUCTION ::=  DATAPROCESSING{:
                                   statement.setInstructionType(Constants.DP_TYPE);
                                  :} |
                   MEMORY{:
                          statement.setInstructionType(Constants.MEM_TYPE);
                          :} |
                   branch:bmnemonic calllabel:calledLabel{:
                                                         statement.setInstructionType(Constants.B_TYPE);
                                                         statement.setMnemonic(bmnemonic);
                                                         statement.setCallLabel(calledLabel);
                                                         statement.setLine(calledLabelleft+1);
                                                         if(bmnemonic.length()>1){
                                                            statement.setHasConditionalSufix(true);
                                                         }
                                                         :};
  DATAPROCESSING ::= DPMNEMONIC DPADDR | CMPMNEMONIC CMVADDR | MVMNEMONIC MOVADDR |
                         MLAMNEMONIC MLAADDR |MULMNEMONIC MULADDR|RRXMNEMONIC RRXADDR| SHIFTMNEMONIC SHIFTADDR;
  MEMORY ::= MEMMNEMONIC register:Reg1 comma RELATIVEADDR{:
                                                          statement.setRd(Reg1);
                                                          :} ;
  DPADDR ::= NORMALADDR comma register:Reg3{:
                                            statement.setRm(Reg3);
                                            statement.setAddressingMode(Constants.DP_NORMAL_ADDRESING);
                                            :} |
             NORMALADDR comma IMMEDIATE{:
                                        statement.setAddressingMode(Constants.DP_IMM_ADDRESSING);
                                        :};
  NORMALADDR ::= register:Rega comma register:Regb{:
                                                   statement.setRd(Rega);
                                                   statement.setRn(Regb);
                                                   :};

  RELATIVEADDR ::= leftpar register:Rn comma IMMEDIATE rightpar{:
                                                                statement.setRn(Rn);
                                                                statement.setAddressingMode(Constants.MEM_OFFSET_IMM_ADDRESSING);
                                                             :} |
                   leftpar register:Rn rightpar{:
                                             statement.setRn(Rn);
                                             statement.setAddressingMode(Constants.MEM_REG_ADDRESSING);
                                             :} |
                   leftpar register:Rn comma register:Rm rightpar{:
                                                                  statement.setAddressingMode(Constants.MEM_OFFSET_REG_ADDRESSING);
                                                                  statement.setRn(Rn);
                                                                  statement.setRm(Rm);
                                                                  :};
  MOVADDR ::= register:r1 comma register:r2{:statement.setAddressingMode(Constants.DP_CMV_REG_ADDRESSING);
                                             statement.setRd(r1);
                                             statement.setRm(r2);
                                            :} |
                register:Reg1 comma IMMEDIATE{:statement.setRd(Reg1);
                                               statement.setAddressingMode(Constants.DP_CMV_IMM_ADDRESSING);
                                              :};
  CMVADDR ::= register:r1 comma register:r2{:statement.setAddressingMode(Constants.DP_CMV_REG_ADDRESSING);
                                                           statement.setRn(r1);
                                                           statement.setRm(r2);
                                                          :} |
              register:Reg1 comma IMMEDIATE{:statement.setRn(Reg1);
                                             statement.setAddressingMode(Constants.DP_CMV_IMM_ADDRESSING);
                                            :};
  MLAADDR ::= register:rega comma register:regb comma register:regc comma register:regd{:statement.setAddressingMode(Constants.DP_MLA_NORMAL_ADDRESSING);
                                                                                         statement.setRd(rega);
                                                                                         statement.setRn(regb);
                                                                                         statement.setRm(regc);
                                                                                         statement.setRa(regd);
                                                                                        :};

  RRXADDR ::= register:rega comma register:regb{:statement.setAddressingMode(Constants.DP_RRX_NORMAL_ADDRESSING);
                                                 statement.setRd(rega);
                                                 statement.setRm(regb);
                                                :};
  SHIFTADDR ::= register:rega comma register:regb comma register:regc{:statement.setAddressingMode(Constants.DP_SHIFT_NORMAL_ADDRESSING);
                                                                      statement.setRd(rega);
                                                                      statement.setRm(regb);
                                                                      statement.setRs(regc);
                                                                     :} |
                register:regd comma register:rege comma SHAMT5{:statement.setAddressingMode(Constants.DP_SHIFT_SHAMT5_ADDRESSING);
                                                              statement.setRd(regd);
                                                              statement.setRm(rege);
                                                             :};

  MULADDR ::= NORMALADDR comma register:Reg1{:statement.setRm(Reg1);
                                             statement.setAddressingMode(Constants.DP_MUL_NORMAL_ADDRESSING);
                                             :};
  DPMNEMONIC ::= mnemonic:mnemonic{:statement.setMnemonic(mnemonic);
                                    statement.setLine(mnemonicleft+1);
                                   :} |
                 conditionalmnemonic:condSufix{:statement.setMnemonic(condSufix);
                                                statement.setLine(condSufixleft+1);
                                                statement.setHasConditionalSufix(true);
                                               :} |
                 mnemonicset:setFlagsSufix{:statement.setMnemonic(setFlagsSufix);
                                            statement.setLine(setFlagsSufixleft+1);
                                            statement.setHasSetFlagsSufix(true);
                                           :} |
                 mnemonicsetconditional:setCondSufix{:statement.setMnemonic(setCondSufix);
                                                      statement.setLine(setCondSufixleft+1);
                                                      statement.setHasConditionalSufix(true);
                                                      statement.setHasSetFlagsSufix(true);
                                                     :};
  CMPMNEMONIC ::= compare:mnemonic{:statement.setMnemonic(mnemonic);
                                    statement.setLine(mnemonicleft+1);
                                   :} |
                  compareconditional:condSufix{:statement.setMnemonic(condSufix);
                                                statement.setLine(condSufixleft+1);
                                                statement.setHasConditionalSufix(true);
                                               :};
  MVMNEMONIC ::= move:mnemonic{:statement.setMnemonic(mnemonic);
                                statement.setLine(mnemonicleft+1);
                               :} |
                conditionalmove:condSufix{:statement.setMnemonic(condSufix);
                                           statement.setLine(condSufixleft+1);
                                           statement.setHasConditionalSufix(true);
                                          :} |
                moveset:setFlagsSufix{:statement.setMnemonic(setFlagsSufix);
                                       statement.setLine(setFlagsSufixleft+1);
                                       statement.setHasSetFlagsSufix(true);
                                      :} |
                movesetconditional:setCondSufix{:statement.setMnemonic(setCondSufix);
                                                 statement.setLine(setCondSufixleft+1);
                                                 statement.setHasConditionalSufix(true);
                                                 statement.setHasSetFlagsSufix(true);
                                                :};
  MLAMNEMONIC ::= mla:mnemonic{:statement.setMnemonic(mnemonic);
                                statement.setLine(mnemonicleft+1);
                               :} |
                  mlaconditional:condSufix{:statement.setMnemonic(condSufix);
                                            statement.setLine(condSufixleft+1);
                                            statement.setHasConditionalSufix(true);
                                           :} |
                  mlaset:setFlagsSufix{:statement.setMnemonic(setFlagsSufix);
                                        statement.setLine(setFlagsSufixleft+1);
                                        statement.setHasSetFlagsSufix(true);
                                       :} |
                  mlasetconditional:setCondSufix{:statement.setMnemonic(setCondSufix);
                                                  statement.setLine(setCondSufixleft+1);
                                                  statement.setHasConditionalSufix(true);
                                                  statement.setHasSetFlagsSufix(true);
                                                 :};
  MULMNEMONIC ::= mul:mnemonic{:statement.setMnemonic(mnemonic);
                                  statement.setLine(mnemonicleft+1);
                                 :} |
                    mulconditional:condSufix{:statement.setMnemonic(condSufix);
                                              statement.setLine(condSufixleft+1);
                                              statement.setHasConditionalSufix(true);
                                             :} |
                    mulset:setFlagsSufix{:statement.setMnemonic(setFlagsSufix);
                                          statement.setLine(setFlagsSufixleft+1);
                                          statement.setHasSetFlagsSufix(true);
                                         :} |
                    mulsetconditional:setCondSufix{:statement.setMnemonic(setCondSufix);
                                                    statement.setLine(setCondSufixleft+1);
                                                    statement.setHasConditionalSufix(true);
                                                    statement.setHasSetFlagsSufix(true);
                                                   :};
   RRXMNEMONIC ::= rrx:mnemonic{:statement.setMnemonic(mnemonic);
                                     statement.setLine(mnemonicleft+1);
                                    :} |
                       conditionalrrx:condSufix{:statement.setMnemonic(condSufix);
                                                 statement.setLine(condSufixleft+1);
                                                 statement.setHasConditionalSufix(true);
                                                :} |
                       rrxset:setFlagsSufix{:statement.setMnemonic(setFlagsSufix);
                                             statement.setLine(setFlagsSufixleft+1);
                                             statement.setHasSetFlagsSufix(true);
                                            :} |
                       rrxsetconditional:setCondSufix{:statement.setMnemonic(setCondSufix);
                                                       statement.setLine(setCondSufixleft+1);
                                                       statement.setHasConditionalSufix(true);
                                                       statement.setHasSetFlagsSufix(true);
                                                      :};
  SHIFTMNEMONIC ::= shift:mnemonic{:statement.setMnemonic(mnemonic);
                                       statement.setLine(mnemonicleft+1);
                                      :} |
                         conditionalshift:condSufix{:statement.setMnemonic(condSufix);
                                                     statement.setLine(condSufixleft+1);
                                                     statement.setHasConditionalSufix(true);
                                                  :} |
                         shiftset:setFlagsSufix{:statement.setMnemonic(setFlagsSufix);
                                               statement.setLine(setFlagsSufixleft+1);
                                               statement.setHasSetFlagsSufix(true);
                                              :} |
                         shiftsetconditional:setCondSufix{:statement.setMnemonic(setCondSufix);
                                                         statement.setLine(setCondSufixleft+1);
                                                         statement.setHasConditionalSufix(true);
                                                         statement.setHasSetFlagsSufix(true);
                                                        :};
  MEMMNEMONIC ::= memorymnemonic:mnemonic{:statement.setMnemonic(mnemonic);
                                           statement.setLine(mnemonicleft+1);
                                          :} |
                  memorymnemonicconditional:condSufix{:statement.setMnemonic(condSufix);
                                                       statement.setLine(condSufixleft+1);
                                                       statement.setHasConditionalSufix(true);
                                                      :};
  IMMEDIATE ::= sharp hex:hexNum{:
                                 statement.setImm(hexNum);
                                 :} |
                sharp num:decNum{:
                                 statement.setImm(decNum);
                                 :};
  SHAMT5 ::= sharp num:decNum{:
                                   statement.setShamt5(decNum);
                                   :};

